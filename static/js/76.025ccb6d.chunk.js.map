{"version":3,"file":"static/js/76.025ccb6d.chunk.js","mappings":"qSAAMA,EAAW,+BACXC,EAAU,mCACT,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,CAAC,EAA1D,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,GAE7C,CAEM,SAASY,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBAC0Ba,EAD1B,8CAG9B,CAEM,SAASC,EAAaC,GAC3B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,oBACaf,EADb,mBAG9B,CAEM,SAASgB,EAAkBD,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACqBf,EADrB,mBAG9B,CAEM,SAASiB,EAAkBF,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACqBf,EADrB,0BAG9B,C,mHCtCD,EAA4B,wBAA5B,EAA+D,uB,SCKhD,SAASkB,IACtB,IAAQH,GAAYI,EAAAA,EAAAA,MAAZJ,QACR,GAAwBK,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAAkBD,GAASS,MAAK,SAAAC,GAC9BH,EAAQG,EAAKJ,KACd,GACF,GAAE,CAACN,KAGF,8BACGM,IACC,eAAIK,UAAWC,EAAf,SACGN,EAAKO,KAAI,SAAAC,GAAI,OACZ,2BACE,gBACEH,UAAWC,EACXG,IACED,EAAKE,aAAL,yCACsCF,EAAKE,cACvCC,EAENC,IAAKJ,EAAKK,QAEZ,uBAAIL,EAAKK,QACT,sCAAcL,EAAKM,eAXZN,EAAKO,GADF,OAmBvB,C","sources":["api/api.js","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '77b65a1040336b1047e785f5b6149d20';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovie() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieId(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n\nconst Api = {\n  fetchTrendingMovie,\n  fetchSearchMovies,\n  fetchMovieId,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default Api;\n","// extracted by mini-css-extract-plugin\nexport default {\"actorList\":\"Cast_actorList__0r4HV\",\"actorImg\":\"Cast_actorImg__T6qL2\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from '../../api/api';\nimport defaultImg from '../errorImg.jpg';\nimport styles from '../Cast/Cast.module.css';\n\nexport default function MovieDetailsPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId).then(data => {\n      setCast(data.cast);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <ul className={styles.actorList}>\n          {cast.map(item => (\n            <li key={item.id}>\n              <img\n                className={styles.actorImg}\n                src={\n                  item.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${item.profile_path}`\n                    : defaultImg\n                }\n                alt={item.name}\n              ></img>\n              <p>{item.name}</p>\n              <p>Character:{item.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovie","fetchSearchMovies","query","fetchMovieId","movieId","fetchMovieCredits","fetchMovieReviews","MovieDetailsPage","useParams","useState","cast","setCast","useEffect","then","data","className","styles","map","item","src","profile_path","defaultImg","alt","name","character","id"],"sourceRoot":""}